{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ML for Beginners - Day 2","provenance":[],"authorship_tag":"ABX9TyMWYA+a+Pt0gGfin+ivJCPu"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"m0o_rskrzXgq"},"source":["# **Performing Exploratory Data Analysis (EDA) on the [Kaggle Titanic Dataset](https://www.kaggle.com/c/titanic/data)**\n","Diane Granger<br>\n","dianeegranger@gmail.com<br/>"]},{"cell_type":"markdown","metadata":{"id":"P4s2tm7w1fK8"},"source":["## **What is Exploratory Data Analysis (EDA)?**\n","EDA is the first step of building a successful Machine Learning model.  It is the process of learning about and becoming familiar with the dataset.\n","\n","To perform EDA, use software tools such as numpy, pandas, matplotlib, plotly, and seaborn to help provide statisical and visual information about the dataset.  This type of information about the dataset will help to answer many questions about the dataset.  In particular, a detailed EDA help identify which features of the dataset will be helpful in building a successful model for **predicting** the target ouput."]},{"cell_type":"markdown","metadata":{"id":"g1yrkzIdTVTD"},"source":["# **Python**<br/>\n","[Python](https://www.python.org/) is a high-level, dynamically typed multiparadigm programming language. Python code is often said to be almost like pseudocode, since it allows you to express very powerful ideas in very few lines of code while being very readable.   We will be using Python to perform this EDA on the Kaggle Titanic Dataset."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2olOjVShPXez","executionInfo":{"status":"ok","timestamp":1634341279434,"user_tz":240,"elapsed":250,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"081586c8-f0e3-48bc-d6af-3e63c4cbd728"},"source":["# Check the version of Python being used\n","!python --version"],"execution_count":1,"outputs":[{"output_type":"stream","name":"stdout","text":["Python 3.7.12\n"]}]},{"cell_type":"markdown","metadata":{"id":"OSWBOEnLzbXl"},"source":["# **Install the Python libraries that will be used in this EDA:**<br/>\n","- numpy (pre-installed) - efficient array manipulation\n","- pandas (pre-installed) - built-in functions for data preprocessing\n","- matplotlib - visualization\n","- seaborn - visualization\n","- plotly - visualization"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BUdUl1UzOnxp","executionInfo":{"status":"ok","timestamp":1634341282238,"user_tz":240,"elapsed":2675,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"acbc97d5-b3bf-4397-837f-f3053004a460"},"source":["!pip show numpy     # preinstalled check"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Name: numpy\n","Version: 1.19.5\n","Summary: NumPy is the fundamental package for array computing with Python.\n","Home-page: https://www.numpy.org\n","Author: Travis E. Oliphant et al.\n","Author-email: None\n","License: BSD\n","Location: /usr/local/lib/python3.7/dist-packages\n","Requires: \n","Required-by: yellowbrick, xgboost, xarray, wordcloud, torchvision, torchtext, tifffile, thinc, Theano-PyMC, tensorflow, tensorflow-probability, tensorflow-hub, tensorflow-datasets, tensorboard, tables, statsmodels, spacy, sklearn-pandas, seaborn, scs, scipy, scikit-learn, resampy, qdldl, PyWavelets, python-louvain, pystan, pysndfile, pymc3, pyerfa, pyemd, pyarrow, plotnine, patsy, pandas, osqp, opt-einsum, opencv-python, opencv-contrib-python, numexpr, numba, nibabel, netCDF4, moviepy, mlxtend, mizani, missingno, matplotlib, matplotlib-venn, lightgbm, librosa, Keras-Preprocessing, kapre, jpeg4py, jaxlib, jax, imgaug, imbalanced-learn, imageio, hyperopt, holoviews, h5py, gym, gensim, folium, fix-yahoo-finance, fbprophet, fastprogress, fastdtw, fastai, fa2, ecos, daft, cvxpy, cufflinks, cmdstanpy, cftime, Bottleneck, bokeh, blis, autograd, atari-py, astropy, arviz, altair, albumentations\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c5p1SaI2PBOy","executionInfo":{"status":"ok","timestamp":1634341284884,"user_tz":240,"elapsed":2651,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"5487c3fd-a218-4736-aa9e-40dce9521b1d"},"source":["!pip show pandas     # preinstalled check"],"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Name: pandas\n","Version: 1.1.5\n","Summary: Powerful data structures for data analysis, time series, and statistics\n","Home-page: https://pandas.pydata.org\n","Author: None\n","Author-email: None\n","License: BSD\n","Location: /usr/local/lib/python3.7/dist-packages\n","Requires: numpy, python-dateutil, pytz\n","Required-by: xarray, vega-datasets, statsmodels, sklearn-pandas, seaborn, pymc3, plotnine, pandas-profiling, pandas-gbq, pandas-datareader, mlxtend, mizani, holoviews, gspread-dataframe, google-colab, fix-yahoo-finance, fbprophet, fastai, cufflinks, cmdstanpy, arviz, altair\n"]}]},{"cell_type":"code","metadata":{"id":"d31nlO3ey2BD","executionInfo":{"status":"ok","timestamp":1634341287792,"user_tz":240,"elapsed":2940,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}}},"source":["# Install remaining necessary libraries:  matplotlib, seaborn, and plotly\n","!pip3 install matplotlib seaborn plotly --q"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DXef3cZXKwZH"},"source":["# **Import the libraries so that they are ready to be used.**<br/>\n","To access a module in Python, you can use the [import statement](https://careerkarma.com/blog/python-import/). The import statement reads the code in a Python module and allows you to use it in another file. Many of the modules you can use in your programs are part of the Python Standard Library.<br/>"]},{"cell_type":"code","metadata":{"id":"ogX3B8_J1Ri0","executionInfo":{"status":"ok","timestamp":1634341288544,"user_tz":240,"elapsed":755,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}}},"source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","import numpy as np\n","import pandas as pd\n","import plotly.express as px"],"execution_count":5,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"T4TT6fZJa9Yg"},"source":["# **Obtaining and Reading the Dataset**"]},{"cell_type":"markdown","metadata":{"id":"6z26rjH-Eprq"},"source":["The Titanic dataset is available and can be downloaded directly from the [Kaggle website](https://www.kaggle.com/c/titanic/data).  It can then be uploaded to Google Colab to a local storage location where the data analysis will be performed.  The name of the file is train.csv.  The extension of the file is 'csv' which indicates that this is a Comma Separated Values dataset.<br/>\n","After uploading the `train.csv` file, a viewing of the file within Google Collab will verify that the format of the data is indeed comma separated values."]},{"cell_type":"markdown","metadata":{"id":"pVdU4yrRbSj_"},"source":["# **Description of the Dataset:  train.csv**<br/>\n","\n"]},{"cell_type":"markdown","metadata":{"id":"dOKcEgTOWe-8"},"source":["**train.csv**<br/>\n","*First 5 rows of the raw (csv) data file*, **`train.csv`**:<br/>\n","PassengerId,Survived,Pclass,Name,Sex,Age,SibSp,Parch,Ticket,Fare,Cabin,Embarked<br/>\n","1,0,3,\"Braund, Mr. Owen Harris\",male,22,1,0,A/5 21171,7.25,,S,<br/>\n","2,1,1,\"Cumings, Mrs. John Bradley (Florence Briggs Thayer)\",female,38,1,0,PC 17599,71.2833,C85,C<br/>\n","3,1,3,\"Heikkinen, Miss. Laina\",female,26,0,0,STON/O2. 3101282,7.925,,S<br/>\n","4,1,1,\"Futrelle, Mrs. Jacques Heath (Lily May Peel)\",female,35,1,0,113803,53.1,C123,S<br/>\n","5,0,3,\"Allen, Mr. William Henry\",male,35,0,0,373450,8.05,,S<br/>"]},{"cell_type":"markdown","metadata":{"id":"TiytS4LueSfD"},"source":["Data Description\n","Overview\n","The data has been split into two groups:\n","\n","training set (train.csv)\n","test set (test.csv)\n","The training set should be used to build your machine learning models. For the training set, we provide the outcome (also known as the “ground truth”) for each passenger. Your model will be based on “features” like passengers’ gender and class. You can also use feature engineering to create new features.\n","\n","The test set should be used to see how well your model performs on unseen data. For the test set, we do not provide the ground truth for each passenger. It is your job to predict these outcomes. For each passenger in the test set, use the model you trained to predict whether or not they survived the sinking of the Titanic.\n","\n","We also include gender_submission.csv, a set of predictions that assume all and only female passengers survive, as an example of what a submission file should look like.\n","\n","Data Dictionary\n","Variable\tDefinition\tKey\n","survival\tSurvival\t0 = No, 1 = Yes\n","pclass\tTicket class\t1 = 1st, 2 = 2nd, 3 = 3rd\n","sex\tSex\t\n","Age\tAge in years\t\n","sibsp\t# of siblings / spouses aboard the Titanic\t\n","parch\t# of parents / children aboard the Titanic\t\n","ticket\tTicket number\t\n","fare\tPassenger fare\t\n","cabin\tCabin number\t\n","embarked\tPort of Embarkation\tC = Cherbourg, Q = Queenstown, S = Southampton\n","Variable Notes\n","pclass: A proxy for socio-economic status (SES)\n","1st = Upper\n","2nd = Middle\n","3rd = Lower\n","\n","age: Age is fractional if less than 1. If the age is estimated, is it in the form of xx.5\n","\n","sibsp: The dataset defines family relations in this way...\n","Sibling = brother, sister, stepbrother, stepsister\n","Spouse = husband, wife (mistresses and fiancés were ignored)\n","\n","parch: The dataset defines family relations in this way...\n","Parent = mother, father\n","Child = daughter, son, stepdaughter, stepson\n","Some children travelled only with a nanny, therefore parch=0 for them."]},{"cell_type":"markdown","metadata":{"id":"mkkW05VSeT6_"},"source":["# **Load the Dataset**<br/>\n","To perform the EDA, work with the training dataset file named, `train.csv`.  As mentioned above, this file is of type comma separated values, (CSV).  The pandas library offers a function to read files of this type, `read_csv()`.<br/>  \n","* Use `df.read_csv()` to load the dataset, `train.csv`, into a dataframe and assign the new dataframe to the variable `df`."]},{"cell_type":"code","metadata":{"id":"FTrzh1sR1Rfa","executionInfo":{"status":"ok","timestamp":1634341288548,"user_tz":240,"elapsed":22,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}}},"source":["df = pd.read_csv(\"train.csv\")"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"h2i7CKSN8zV6"},"source":["# **Overview of the Dataset**"]},{"cell_type":"markdown","metadata":{"id":"pvR1a0m7CTAF"},"source":["* `df.head()`:     display the first 5 (default value) rows of the DataFrame. "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":203},"id":"j4m4J2NpDeEm","executionInfo":{"status":"ok","timestamp":1634341288549,"user_tz":240,"elapsed":21,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"a5d13a31-406c-49bc-9d19-4dfb99873e2e"},"source":["df.head()"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n","0            1         0       3  ...   7.2500   NaN         S\n","1            2         1       1  ...  71.2833   C85         C\n","2            3         1       3  ...   7.9250   NaN         S\n","3            4         1       1  ...  53.1000  C123         S\n","4            5         0       3  ...   8.0500   NaN         S\n","\n","[5 rows x 12 columns]"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"UhmKgVSGDopQ"},"source":["Performing the `df.head()` method above displays the top 5 rows of the DataFrame.  Study the columns to determine the type of information is available from the DataFrame.  The `PassengerId` column is basically a label which we need to predict.  `Survived` is `1` if the passenger survived and `0` if the passenger did not survive.  `Pclass` is the class of the ticket purchased.  `Name` is the name of the passenger.  `Sex` is the gender of the passenger, male or female are the choices.  `Age` is the age of the passenger represented  in years as a floating point number with 1 decimal point.  `SibSp` is the number of siblings/spouses travelling with the passenger.  `Parch` describes how many children are travelling with parent passengers.  `Ticket` is the ticket number.  `Fare` is the price paid for the ticket.  `Cabin` is the cabin number.  `Embarked` is the Port of Embarkation (location) where the passenger boarded the Titanic:  C=Cherbourg, Q=Queenstown, S=Southampton."]},{"cell_type":"markdown","metadata":{"id":"z8GQw5wqAM4b"},"source":["* `df.shape`:  display the shape of the DataFrame."]},{"cell_type":"code","metadata":{"id":"Zos_Scpk1RWA","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1634341288550,"user_tz":240,"elapsed":19,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"27a3d868-0f2e-4bb3-d7d3-920232f9c812"},"source":["df.shape"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(891, 12)"]},"metadata":{},"execution_count":8}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"J7KFSS8Gul1R","executionInfo":{"status":"ok","timestamp":1634341288550,"user_tz":240,"elapsed":13,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"ee2fe5f1-6031-42a3-cd45-c20d94360a20"},"source":["print(f\"The Titanic DataFrame has {df.shape[0]} rows and {df.shape[1]} columns.\")"],"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["The Titanic DataFrame has 891 rows and 12 columns.\n"]}]},{"cell_type":"markdown","metadata":{"id":"wSHXznJTAyy5"},"source":["* `df.info()`:  display details about the DataFrame's contents such as data types and number of non-null data items, and amount of memory the data is using."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"3xqLtirVCPvd","executionInfo":{"status":"ok","timestamp":1634341288680,"user_tz":240,"elapsed":13,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"1a36c586-222c-4dcc-dedd-f7be8c5ae2ee"},"source":["df.info()"],"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 12 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  891 non-null    int64  \n"," 1   Survived     891 non-null    int64  \n"," 2   Pclass       891 non-null    int64  \n"," 3   Name         891 non-null    object \n"," 4   Sex          891 non-null    object \n"," 5   Age          714 non-null    float64\n"," 6   SibSp        891 non-null    int64  \n"," 7   Parch        891 non-null    int64  \n"," 8   Ticket       891 non-null    object \n"," 9   Fare         891 non-null    float64\n"," 10  Cabin        204 non-null    object \n"," 11  Embarked     889 non-null    object \n","dtypes: float64(2), int64(5), object(5)\n","memory usage: 83.7+ KB\n"]}]},{"cell_type":"markdown","metadata":{"id":"eYut55wGQDCN"},"source":["`PassengerId` is a sequential number from 1 to 891, `891` values of type int64.  That feature will probably not be a factor in making a better prediction using the Classification model.  `Survived` is a binary value of either `0` or `1`, `891` values of type int64.  `Pclass` is the ticket class:  `891` values of type int64. `Name` is the name of the passenger, `891` values of type object.  `Sex` is the gender of the passenger, male or female, `891` values of type object.  `Age` is the age of the passenger in years, `714` values of type float64.  `SibSp` is number of siblings/spouse travelling with the passenger, `891` values of type int64.   `Parch` is the number of children with parents, `891` values of type int64.  `Ticket` is the ticket number, `891` values of type object.  `Fare` is the price the passenger paid for the ticket, `891` values of type float64.  `Cabin` is the cabin number, `204` values of type object. `Embarked` is the location of boarding the ship,  C=Cherbourg, Q=Queenstown, S=Southampton, `889` values of type object. \n","<br/>\n","The data has `2` features of type float64:  `Age` and `Fare`; `5` features of type int64:  `PassengerId`, `Survived`, `Pclass`, `SibSp`, and `Parch`; `5` features of type object:  `Name`, `Sex`, `Ticket`, `Cabin`, and `Embarked`. \n","<br/>\n","\n","Just by viewing the resulting data from running `df.info()`, it can be seen that some features have missing values.  The `Non-Null Count` field shows that there data is missing in the `Age`, `Cabin`, and `Embarked` features.  This is evident because the `Non-Null Count` for each feature should be the same for feature should be the same as the number of rows in the DataFrame which is `891` which was shown in the `df.shape` method earlier.  `Age` has `891` - `714` = `177` missing values.  `Cabin` has `891` - `204` = `687` missing values.  `Embarked` has `891` - `889` = `2` missing values.  So, `Cabin` has the greatest number of missing values at `687`. "]},{"cell_type":"markdown","metadata":{"id":"Z-HOEKYUDpUe"},"source":["* `describe()`: displays statistical information about the DataFrame such as mean, std, min, max, and percentiles about the ***numerical features*** only."]},{"cell_type":"code","metadata":{"id":"JtiLex_MFGoz","colab":{"base_uri":"https://localhost:8080/","height":295},"executionInfo":{"status":"ok","timestamp":1634341288681,"user_tz":240,"elapsed":12,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"4c1465a2-e06a-49d3-bf1c-438fd5c6ddfe"},"source":["df.describe()"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>714.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>446.000000</td>\n","      <td>0.383838</td>\n","      <td>2.308642</td>\n","      <td>29.699118</td>\n","      <td>0.523008</td>\n","      <td>0.381594</td>\n","      <td>32.204208</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>257.353842</td>\n","      <td>0.486592</td>\n","      <td>0.836071</td>\n","      <td>14.526497</td>\n","      <td>1.102743</td>\n","      <td>0.806057</td>\n","      <td>49.693429</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.420000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>223.500000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>20.125000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>7.910400</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>446.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>28.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>14.454200</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>668.500000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>38.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>31.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>891.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>80.000000</td>\n","      <td>8.000000</td>\n","      <td>6.000000</td>\n","      <td>512.329200</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare\n","count   891.000000  891.000000  891.000000  ...  891.000000  891.000000  891.000000\n","mean    446.000000    0.383838    2.308642  ...    0.523008    0.381594   32.204208\n","std     257.353842    0.486592    0.836071  ...    1.102743    0.806057   49.693429\n","min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000\n","25%     223.500000    0.000000    2.000000  ...    0.000000    0.000000    7.910400\n","50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200\n","75%     668.500000    1.000000    3.000000  ...    1.000000    0.000000   31.000000\n","max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200\n","\n","[8 rows x 7 columns]"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","metadata":{"id":"CxL1J8wArXdP"},"source":["Check to see how much data is actually missing from the entire DataFrame."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":417},"id":"FGiH0QeTiLJg","executionInfo":{"status":"ok","timestamp":1634341288681,"user_tz":240,"elapsed":12,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"3860d6df-d49e-498a-9d96-7ed90197abb9"},"source":["df.isna()      # Is NaN?:  if NaN, returns True, otherwise, returns False"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>886</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>887</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>889</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","    </tr>\n","    <tr>\n","      <th>890</th>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>False</td>\n","      <td>True</td>\n","      <td>False</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>891 rows × 12 columns</p>\n","</div>"],"text/plain":["     PassengerId  Survived  Pclass   Name  ...  Ticket   Fare  Cabin  Embarked\n","0          False     False   False  False  ...   False  False   True     False\n","1          False     False   False  False  ...   False  False  False     False\n","2          False     False   False  False  ...   False  False   True     False\n","3          False     False   False  False  ...   False  False  False     False\n","4          False     False   False  False  ...   False  False   True     False\n","..           ...       ...     ...    ...  ...     ...    ...    ...       ...\n","886        False     False   False  False  ...   False  False   True     False\n","887        False     False   False  False  ...   False  False  False     False\n","888        False     False   False  False  ...   False  False   True     False\n","889        False     False   False  False  ...   False  False  False     False\n","890        False     False   False  False  ...   False  False   True     False\n","\n","[891 rows x 12 columns]"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aFLk5NyW4Gn5","executionInfo":{"status":"ok","timestamp":1634341288681,"user_tz":240,"elapsed":11,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"bae0c15b-43ee-436a-b540-a39a393729fa"},"source":["df.isna().sum()     # sum up all of the values not available in any of the columns"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId      0\n","Survived         0\n","Pclass           0\n","Name             0\n","Sex              0\n","Age            177\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             0\n","Cabin          687\n","Embarked         2\n","dtype: int64"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"0EwuuojY4p23"},"source":["Now it is clear to see that `Age` has `177` missing values, `Cabin` has `687` missing values, and `Embarked` has `2` missing values."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Qqiblv0W6BHs","executionInfo":{"status":"ok","timestamp":1634341288682,"user_tz":240,"elapsed":9,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"daf9518a-a96f-4fd7-a124-a6cb25682531"},"source":["df.isna().sum().sort_values()     # sort above values"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PassengerId      0\n","Survived         0\n","Pclass           0\n","Name             0\n","Sex              0\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             0\n","Embarked         2\n","Age            177\n","Cabin          687\n","dtype: int64"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"eVuUwaiu6Pdt"},"source":["The above data is sorted an ascending order, which is the default for the sort_values() method.  For this EDA, it is more useful to see this data in descending order.  To sort in ascending order set the default sort order to `ascending=False` as shown below:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i3LrgEDS4GkO","executionInfo":{"status":"ok","timestamp":1634341288807,"user_tz":240,"elapsed":132,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"5e32de41-d1ff-49b8-ab67-83d88dd6b73a"},"source":["df.isna().sum().sort_values(ascending=False)     # sort the above values in descending order"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Cabin          687\n","Age            177\n","Embarked         2\n","Fare             0\n","Ticket           0\n","Parch            0\n","SibSp            0\n","Sex              0\n","Name             0\n","Pclass           0\n","Survived         0\n","PassengerId      0\n","dtype: int64"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","metadata":{"id":"E2JtiN2V77gp"},"source":["To see the average of missing values, divide the above values by len(df) as shown below:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"O8AbPTdL4Gga","executionInfo":{"status":"ok","timestamp":1634341288808,"user_tz":240,"elapsed":10,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"075bece0-dc2d-41a5-8632-88e6d566cdd1"},"source":["df.isna().sum().sort_values(ascending=False)/len(df)"],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Cabin          0.771044\n","Age            0.198653\n","Embarked       0.002245\n","Fare           0.000000\n","Ticket         0.000000\n","Parch          0.000000\n","SibSp          0.000000\n","Sex            0.000000\n","Name           0.000000\n","Pclass         0.000000\n","Survived       0.000000\n","PassengerId    0.000000\n","dtype: float64"]},"metadata":{},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"D-omFm09-JpV"},"source":["Now, for the percentage of missing values, multiply the above values by 100:"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yc2xhqAe4Gcr","executionInfo":{"status":"ok","timestamp":1634341288808,"user_tz":240,"elapsed":9,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"1170e8ea-072d-4060-f122-43516d73a4b7"},"source":["df.isna().sum().sort_values(ascending=False)/len(df) * 100     # percentage of missing values"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Cabin          77.104377\n","Age            19.865320\n","Embarked        0.224467\n","Fare            0.000000\n","Ticket          0.000000\n","Parch           0.000000\n","SibSp           0.000000\n","Sex             0.000000\n","Name            0.000000\n","Pclass          0.000000\n","Survived        0.000000\n","PassengerId     0.000000\n","dtype: float64"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"HVv6-UWJ-odn"},"source":["The above data is actually a pandas series.  This series can be converted or stacked into a pandas DataFrame by using the `pd.DataFrame()` function shown below:  "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":418},"id":"O0Zj1-EE4GZJ","executionInfo":{"status":"ok","timestamp":1634341288809,"user_tz":240,"elapsed":8,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"3bfcaa96-794d-4bd6-bdc8-a5ca4ad9412c"},"source":["pd.DataFrame(df.isna().sum().sort_values(ascending=False)/len(df) * 100)"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Cabin</th>\n","      <td>77.104377</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>19.865320</td>\n","    </tr>\n","    <tr>\n","      <th>Embarked</th>\n","      <td>0.224467</td>\n","    </tr>\n","    <tr>\n","      <th>Fare</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>Ticket</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>Parch</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>SibSp</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>Sex</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>Name</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>Pclass</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>Survived</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>PassengerId</th>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                     0\n","Cabin        77.104377\n","Age          19.865320\n","Embarked      0.224467\n","Fare          0.000000\n","Ticket        0.000000\n","Parch         0.000000\n","SibSp         0.000000\n","Sex           0.000000\n","Name          0.000000\n","Pclass        0.000000\n","Survived      0.000000\n","PassengerId   0.000000"]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"418-O19lAuwm"},"source":["It is clear from the above data that `Cabin`, `Age`, and `Embarked`, have `77`, `19`, and `0.22` percent missing values, respectively.  This issue will be resolved in the preprocessing stage."]},{"cell_type":"markdown","metadata":{"id":"zSVH1nLWCc3s"},"source":["# Description of Each Column<br/>\n","\n","1. PassengerId:  Identification number of passenger\n","2. Survived:  Survival status of passenger;  0 = No, 1 = Yes\n","3. Pclass:  Passenger class 1 = 1st, 2 = 2nd, 3 = 3rd\n","4. Name:  Passenger name\n","5. Sex:  Passenger gender - Male or Female\n","6. Age:  Passenger age in years\n","7. SibSp:  # of siblings / spouses aboard the Titanic\n","8. Parch:  # of parents / children aboard the Titanic\n","9. Ticket: Passenger ticket number\n","10. Fare:  Passenger price paid for ticket\n","11. Cabin:  Cabin number\n","12. Embarked:  Port of Embarkation C = Cherbourg, Q = Queenstown, S = Southampton"]},{"cell_type":"markdown","metadata":{"id":"Lu6PUwQoO8_5"},"source":["# **Answer Questions About the Titanic Dataset**"]},{"cell_type":"markdown","metadata":{"id":"Rf66qdXcPyDG"},"source":["* What was the ratio of male to female passengers aboard the ship?"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":298},"id":"3vL-peZ8QHXj","executionInfo":{"status":"ok","timestamp":1634341288968,"user_tz":240,"elapsed":166,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"17de9f52-330e-44dd-d11f-f5d742234f11"},"source":["sns.set_style('whitegrid')\n","sns.countplot(x='Sex', data=df)"],"execution_count":19,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f793730e9d0>"]},"metadata":{},"execution_count":19},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"W57UjQO4Qj2P"},"source":["* What is the distribution of the 'Pclass'?"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":473},"id":"nFEZBMpvQlR2","executionInfo":{"status":"ok","timestamp":1634341289611,"user_tz":240,"elapsed":645,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"2528a3d6-c090-46eb-8178-258c66405a4b"},"source":["sns.catplot('Pclass', data=df, kind='count', hue='Sex')"],"execution_count":20,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning:\n","\n","Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","\n"]},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7f79353c9190>"]},"metadata":{},"execution_count":20},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 430.5x360 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"WTiX__G1R4rA"},"source":["* What is the percentage of 'Survived' passengers versus Non-Survived passengers?  (0:  Non-Survived, 1:  'Survived')"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":479},"id":"kr10SFR12C_v","executionInfo":{"status":"ok","timestamp":1634341289788,"user_tz":240,"elapsed":178,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"b1077ea3-0992-44a3-a60c-d621cafb5f47"},"source":["plt.figure(figsize=(16, 8))\n","df['Survived'].value_counts().plot.bar()\n","plt.show()"],"execution_count":21,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x576 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xOC0X2fYJsog","executionInfo":{"status":"ok","timestamp":1634341289789,"user_tz":240,"elapsed":10,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"33311e6e-cc54-42cb-8c3b-cf89bb67bc82"},"source":["df['Survived'].value_counts()"],"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0    549\n","1    342\n","Name: Survived, dtype: int64"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4SgWxD1WKDxC","executionInfo":{"status":"ok","timestamp":1634341289789,"user_tz":240,"elapsed":7,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"b1827449-bc6c-430e-a275-8dd0ffd31ac4"},"source":["df['Survived'].value_counts()[0]"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/plain":["549"]},"metadata":{},"execution_count":23}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DwZccK8dKRCY","executionInfo":{"status":"ok","timestamp":1634341289789,"user_tz":240,"elapsed":6,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"1447aba5-4f5d-419d-d313-2e4b91f123d6"},"source":["df['Survived'].value_counts()[1]"],"execution_count":24,"outputs":[{"output_type":"execute_result","data":{"text/plain":["342"]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","metadata":{"id":"RH-005DwK-sC"},"source":["Convert `non_survived_pas` and `survived_pas` values to percentages and round to 2 decimal places:"]},{"cell_type":"code","metadata":{"id":"RYv3FDuO2DP1","executionInfo":{"status":"ok","timestamp":1634341289920,"user_tz":240,"elapsed":135,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}}},"source":["non_survived_pas = round(df['Survived'].value_counts()[0]/len(df) * 100, 2)\n","survived_pas = round(df['Survived'].value_counts()[1]/len(df) * 100, 2)"],"execution_count":25,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kscs4iHu4-KR","executionInfo":{"status":"ok","timestamp":1634341289920,"user_tz":240,"elapsed":5,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"3d58a3c4-a81a-430f-ce5d-b9cc66707cc6"},"source":["print(f\"Percentage of passengers survived: {survived_pas}%\")\n","print(f\"Percentage of passengers who did not survive: {non_survived_pas}%\")"],"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Percentage of passengers survived: 38.38%\n","Percentage of passengers who did not survive: 61.62%\n"]}]},{"cell_type":"markdown","metadata":{"id":"VklIOh2aT9Dh"},"source":["* What is the minimum 'Age' and maximum 'Age' of the Titanic passengers?"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"j7gigeRj4-Gt","executionInfo":{"status":"ok","timestamp":1634341289921,"user_tz":240,"elapsed":6,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"1afce629-3fe0-47c5-94b8-3a649dee3471"},"source":["print(f\"Minimum age is : {round(df['Age'].min()*12)} months old.\")\n","print(f\"Maximum age is : {round(df['Age'].max())} years old.\")"],"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["Minimum age is : 5 months old.\n","Maximum age is : 80 years old.\n"]}]},{"cell_type":"markdown","metadata":{"id":"QKaJNxrib_YO"},"source":["The data shows that the youngest passenger was 5 months (0..42 years) old and the oldest passenger was 80 years old.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"G6uO06eu974t"},"source":["# Univariate Analysis of the Titanic Dataset"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"JJnf5zvg4-C9","executionInfo":{"status":"ok","timestamp":1634341290263,"user_tz":240,"elapsed":345,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"a87114ea-5a1e-4c58-dd16-2fb5bb412ce6"},"source":["df.plot(kind=\"scatter\", x=\"Age\", y=\"Survived\")\n","plt.title(\"Age Vs Survived\")\n","plt.show()"],"execution_count":28,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"B4aBXSVX-J_w"},"source":["The **Age Vs Survived** Scatter plot above does not show any real relationship between Age and Survived.  "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":295},"id":"TfBpx-OR49-1","executionInfo":{"status":"ok","timestamp":1634341290570,"user_tz":240,"elapsed":308,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"b8c3f3f9-ccf9-4999-a687-e5603e6523c8"},"source":["df.plot(kind=\"scatter\", x=\"Fare\", y=\"Survived\")\n","plt.title(\"Fare Vs Survived\")\n","plt.show()"],"execution_count":29,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"xMovVhDp_2QD"},"source":["The **Fare Vs Survived** Scatter plot above shows that the majority of the passengers paid a fare between \\$1 and \\$100.  The plot also shows a group of passengers who did not survive of about the same size as the group that paid a fare between \\$1 and \\$100.\n","\n","As the fare increases, the amount of non-survivors decreases drastically.  Paying the higher fare results in a greater chance of survival according to the Scatter plot.  "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":466},"id":"x5Jh-anK4975","executionInfo":{"status":"ok","timestamp":1634341290779,"user_tz":240,"elapsed":212,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"45c47d2a-712e-46e5-d065-d293eb608e2c"},"source":["plt.figure(figsize=(16, 8))\n","plt.pie(df['SibSp'].value_counts().values, autopct='%1.0f%%', labels=[0, 1, 2, 3, 4, 5, 6])\n","plt.show()"],"execution_count":30,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x576 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"MHoYWhhijVtX"},"source":["The above pie chart is displaying the number of siblings and spouses each passenger had.\n","\n","% of Passengers:   # of Siblings and Spouses\n","* 60%:  0 \n","* 23%:  1\n","* 3%:  2\n","* 2%:  3\n","* 2%:  4\n","* 1%:  5\n","* 1%:  6\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":279},"id":"WGt4doj9494E","executionInfo":{"status":"ok","timestamp":1634341290936,"user_tz":240,"elapsed":162,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"e024c597-165f-4c6d-d3b0-6ca327a33cd2"},"source":["df['Parch'].value_counts().plot.bar()"],"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f792c55c250>"]},"metadata":{},"execution_count":31},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"wVLXHYs0j4AW"},"source":["The above bar chart is displaying the number of parents and children were aboard the Titanic.  Most of the passengers (close to 700) were not parents and did not have any children on board."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":497},"id":"0c0CxGqZ490v","executionInfo":{"status":"ok","timestamp":1634341291576,"user_tz":240,"elapsed":643,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"7973c2da-f9eb-4d36-ab4e-bece90e63fb6"},"source":["plt.figure(figsize=(16, 8))\n","sns.histplot(df['Fare'])\n","plt.show()"],"execution_count":32,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x576 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"T1X293AgFi4m"},"source":["The above histogram shows the number of passengers who paid each fare.  The majority of passengers (about 325) paid a fare of $1 - $10.  A small amount of  passengers (about 10-20) paid a fare of over $500."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"id":"J7ShK1sO49wQ","executionInfo":{"status":"ok","timestamp":1634341291740,"user_tz":240,"elapsed":166,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"f37066e6-5bee-4dda-918d-66a12b60d0f2"},"source":["plt.figure(figsize=(16,8))\n","df['Sex'].value_counts().plot.bar()\n","plt.show()"],"execution_count":33,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x576 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"vgoqDw0RlAFj"},"source":["The above bar chart shows there was a much greater amount of male passengers aboard than there were female passengers.\n","\n","*   male passengers:  close to 600\n","*   female passengers:  a little more than 300\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":481},"id":"ozxzs6H849sX","executionInfo":{"status":"ok","timestamp":1634341291881,"user_tz":240,"elapsed":145,"user":{"displayName":"Diane Granger","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"03255196341807109289"}},"outputId":"b97f8b04-5e08-453f-dbaf-24778491c32a"},"source":["plt.figure(figsize=(16,8))\n","df['Embarked'].value_counts().plot.bar()    # Point of embarkation:  C = Cherbourg, Q = Queenstown, S = Southampton\n","plt.show()"],"execution_count":34,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1152x576 with 1 Axes>"]},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"hhSpUMyIB3qM"},"source":["The above bar chart shows that the majority of passengers embarked at Southampton (S), less than one third of the passengers embarked at Cherbourg (C), and less than one sixth of the passengers embarked at Queenstown (Q).\n","\n","Distribution of embarkation:\n","\n","*   Southampton (S):  About 660 passenngers\n","*   Cherbourg (c):  About 170 passengers\n","*   Queenstown (Q):  About 80 passengers\n"]}]}